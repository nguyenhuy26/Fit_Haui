/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Model;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kien5
 */
public class QuanLiThanhVien_ITF extends javax.swing.JFrame {

    /**
     * Creates new form QuanLiThanhVien_ITF
     */
    public QuanLiThanhVien_ITF() {
        initComponents();
        setLocationRelativeTo(null);
        ButtonGroup a = new ButtonGroup();
        a.add(jRadio_nam);
        a.add(jRadio_nu);
    }
    public ArrayList<ThongTinThanhVien> dssv = new ArrayList<>();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void loadFile() {
        try {
            FileInputStream fis = new FileInputStream("SINHVIEN.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            var resultList = (ArrayList) ois.readObject();
            dssv = resultList;
            ois.close();
            fis.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtmasv = new javax.swing.JTextField();
        txttensv = new javax.swing.JTextField();
        txtdiachi = new javax.swing.JTextField();
        jRadio_nam = new javax.swing.JRadioButton();
        jRadio_nu = new javax.swing.JRadioButton();
        cbx_nganh = new javax.swing.JComboBox<>();
        cbx_chucvu = new javax.swing.JComboBox<>();
        btn_Sua = new javax.swing.JButton();
        btn_Them = new javax.swing.JButton();
        btn_Xoa = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        btn_Thoat = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        cbx_TimKiem = new javax.swing.JComboBox<>();
        btn_Tim = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel1.setText("Mã SV");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel2.setText("Tên SV");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel3.setText("Địa Chỉ");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel4.setText("Giới Tính");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel5.setText("Ngành ");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel6.setText("Chức Vụ");

        jRadio_nam.setText("Nam");

        jRadio_nu.setText("Nữ");

        cbx_nganh.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hệ Thống Thông Tin", "Khoa Học Máy Tính", "Kỹ Thuật Phần Mềm", "CNTT" }));

        cbx_chucvu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Quản trị viên", "Thành viên" }));

        btn_Sua.setBackground(new java.awt.Color(102, 255, 255));
        btn_Sua.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_Sua.setText("Sửa");
        btn_Sua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SuaActionPerformed(evt);
            }
        });

        btn_Them.setBackground(new java.awt.Color(102, 255, 255));
        btn_Them.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_Them.setText("Thêm");
        btn_Them.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ThemActionPerformed(evt);
            }
        });

        btn_Xoa.setBackground(new java.awt.Color(102, 255, 255));
        btn_Xoa.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_Xoa.setText("Xóa");
        btn_Xoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_XoaActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ma sv", "ten sv", "dia chi", "gio itinh", "chuc vu", "nganh"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        table.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tableAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        btn_Thoat.setBackground(new java.awt.Color(102, 255, 255));
        btn_Thoat.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_Thoat.setText("Thoát");
        btn_Thoat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ThoatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(204, 255, 255));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Tìm Kiếm Theo ");

        cbx_TimKiem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mã SV", "Tên SV", "Địa Chỉ", "Giới Tính", "Ngành", "Chức Vụ", " " }));

        btn_Tim.setBackground(new java.awt.Color(0, 204, 255));
        btn_Tim.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_Tim.setText("Tìm");
        btn_Tim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_TimActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbx_TimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_Tim)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbx_TimKiem)
                    .addComponent(btn_Tim))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setBackground(new java.awt.Color(153, 255, 255));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setText("Reset");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRadio_nam)
                        .addGap(29, 29, 29)
                        .addComponent(jRadio_nu)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(cbx_chucvu, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtmasv)
                    .addComponent(txttensv)
                    .addComponent(txtdiachi, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cbx_nganh, 0, 1, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_Sua, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_Them, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_Xoa, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                    .addComponent(btn_Thoat, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(194, 194, 194))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_Them, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(btn_Sua, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Xoa, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Thoat, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(cbx_chucvu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtmasv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txttensv))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtdiachi))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jRadio_nam)
                            .addComponent(jRadio_nu))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cbx_nganh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private void reset() {
        loadFile();
        JTable table = new JTable();
        DefaultTableModel model = new DefaultTableModel();
        Object[] columnNames = {"Mã SV", "Tên SV", "Địa chỉ", "Giới tính", "Chức vụ", "Ngành học"};
        model.setColumnIdentifiers(columnNames);
        Object[][] rowData = new Object[dssv.size()][6];
        for (int i = 0; i < dssv.size(); i++) {
            rowData[i][0] = dssv.get(i).getMaSV();
            rowData[i][1] = dssv.get(i).getTenSV();
            rowData[i][3] = dssv.get(i).getGioiTinh();
            rowData[i][2] = dssv.get(i).getDiaChi();
            rowData[i][5] = dssv.get(i).getNganhHoc();
            rowData[i][4] = dssv.get(i).getChucVu();
        }
        model.setDataVector(rowData, columnNames);
        this.table.setModel(model);
        this.add(new JScrollPane(table));
        this.pack();
        this.setVisible(true);
    }

    private void btn_ThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ThemActionPerformed
        loadFile();
        String maSV = txtmasv.getText();
        String tenSV = txttensv.getText();
        String diaChi = txtdiachi.getText();
        ButtonGroup a = new ButtonGroup();
        a.add(jRadio_nam);
        a.add(jRadio_nu);
        var gioiTinh = a.getSelection();
        int chucVu = cbx_chucvu.getSelectedIndex();
        int nganh = cbx_nganh.getSelectedIndex();
        if (maSV.isEmpty() || tenSV.isEmpty() || diaChi.isEmpty() || gioiTinh == null)
            JOptionPane.showMessageDialog(rootPane, "Không để trống thông tin!");
        else {
            boolean check = false;
            for (ThongTinThanhVien item : dssv) {
                if (item.getMaSV().equals(maSV)) {
                    check = true;
                    break;
                }
            }
            if (check) {
                JOptionPane.showMessageDialog(rootPane, "Mã sinh viên đã tồn tại!");
            } else {
                String gt = (a.getSelection() == jRadio_nam.getModel() ? "Nam" : "Nữ");
                String cv = "";
                if (chucVu == 0 || chucVu == -1) {
                    cv = "Quản trị viên";
                }

                if (chucVu == 1) {

                    cv = "Thành viên";
                }
                String nganh1 = "";
                if (nganh == 0 || nganh == -1) {
                    nganh1 = "Hệ Thống Thông Tin";
                }
                if (nganh == 1) {
                    nganh1 = "Khoa Học Máy Tính";
                }
                if (nganh == 2) {
                    nganh1 = "Kỹ Thuật Phần Mềm";
                }
                if (nganh == 3) {
                    nganh1 = "CNTT";
                }

                dssv.add(new ThongTinThanhVien(maSV, tenSV, gt, diaChi, cv, nganh1));
                try {
                    FileOutputStream fos = new FileOutputStream("SINHVIEN.txt");
                    ObjectOutputStream oos = new ObjectOutputStream(fos);
                    oos.writeObject(dssv);
                    oos.close();
                    fos.close();
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                reset();
                JOptionPane.showMessageDialog(rootPane, "Thêm thành công!");

            }
        }
    }//GEN-LAST:event_btn_ThemActionPerformed

    private void tableAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tableAncestorAdded
        reset();
    }//GEN-LAST:event_tableAncestorAdded

    private void btn_SuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SuaActionPerformed
        loadFile();
        String maSV = txtmasv.getText();
        String tenSV = txttensv.getText();
        String diaChi = txtdiachi.getText();
        ButtonGroup a = new ButtonGroup();
        a.add(jRadio_nam);
        a.add(jRadio_nu);
        var gioiTinh = a.getSelection();
        int chucVu = cbx_chucvu.getSelectedIndex();
        int nganh = cbx_nganh.getSelectedIndex();
        if (maSV.isEmpty() || tenSV.isEmpty() || diaChi.isEmpty() || gioiTinh == null)
            JOptionPane.showMessageDialog(rootPane, "Không để trống thông tin!");
        else {
            boolean check = false;
            for (ThongTinThanhVien item : dssv) {
                if (item.getMaSV().equals(maSV)) {
                    check = true;
                    break;
                }
            }
            if (!check) {
                JOptionPane.showMessageDialog(rootPane, "Mã sinh viên khong tồn tại!");
            } else {
                String gt = (a.getSelection() == jRadio_nam.getModel() ? "Nam" : "Nữ");
                String cv = "";
                if (chucVu == 0 || chucVu == -1) {
                    cv = "Quản trị viên";
                }

                if (chucVu == 1) {

                    cv = "Thành viên";
                }
                String nganh1 = "";
                if (nganh == 0 || nganh == -1) {
                    nganh1 = "Hệ Thống Thông Tin";
                }
                if (nganh == 1) {
                    nganh1 = "Khoa Học Máy Tính";
                }
                if (nganh == 2) {
                    nganh1 = "Kỹ Thuật Phần Mềm";
                }
                if (nganh == 3) {
                    nganh1 = "CNTT";
                }
                for (ThongTinThanhVien sua : dssv) {
                    if (sua.getMaSV().equals(maSV)) {
                        sua.setChucVu(cv);
                        sua.setDiaChi(diaChi);
                        sua.setGioiTinh(gt);
                        sua.setTenSV(tenSV);
                        sua.setNganhHoc(nganh1);
                    }
                }
                try {
                    FileOutputStream fos = new FileOutputStream("SINHVIEN.txt");
                    ObjectOutputStream oos = new ObjectOutputStream(fos);
                    oos.writeObject(dssv);
                    oos.close();
                    fos.close();
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                reset();
                JOptionPane.showMessageDialog(rootPane, "Sua thành công!");

            }
        }
    }//GEN-LAST:event_btn_SuaActionPerformed

    private void btn_XoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_XoaActionPerformed
        loadFile();
        String maSV = txtmasv.getText();
        boolean check = false;

        for (ThongTinThanhVien xoa : dssv) {
            if (xoa.getMaSV().equals(maSV)) {
                dssv.remove(xoa);
                check = true;
                break;
            }
        }
        if (!check) {
            JOptionPane.showMessageDialog(rootPane, "Ma SV khong ton tai");
        }
        try {
            FileOutputStream fos = new FileOutputStream("SINHVIEN.txt");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(dssv);
            oos.close();
            fos.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        reset();
        JOptionPane.showMessageDialog(rootPane, "Xoa thành công!");
    }//GEN-LAST:event_btn_XoaActionPerformed

    private void btn_ThoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ThoatActionPerformed
        
        int result = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn Thoát?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            // Người dùng chọn YES
            MenuForm a = new MenuForm();
            a.setVisible(true);
            setVisible(false);
        } else {
            JOptionPane.getRootFrame().dispose();
        }
    }//GEN-LAST:event_btn_ThoatActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        int row = table.rowAtPoint(evt.getPoint());
        String MaSV = (String) table.getValueAt(row, 0);
        String TenSV = (String) table.getValueAt(row, 1);
        String GioiTinh = (String) table.getValueAt(row, 3);
        String DiaChi = (String) table.getValueAt(row, 2);
        String ChucVu = (String) table.getValueAt(row, 4);
        String nganh = (String) table.getValueAt(row, 5);
        txtmasv.setText(MaSV);
        txttensv.setText(TenSV);
        txtdiachi.setText(DiaChi);

        ButtonGroup a = new ButtonGroup();
        a.add(jRadio_nam);
        a.add(jRadio_nu);
        if (ChucVu.equals("Quản trị viên")) {
            cbx_chucvu.setSelectedItem("Quản trị viên");
        }
        if (ChucVu.equals("Thành viên")) {
            cbx_chucvu.setSelectedItem("Thành viên");
        }

        if (nganh.equals("Hệ Thống Thông Tin")) {
            cbx_nganh.setSelectedItem("Hệ Thống Thông Tin");
        }
        if (nganh.equals("Khoa Học Máy Tính")) {
            cbx_nganh.setSelectedItem("Khoa Học Máy Tính");
        }
        if (nganh.equals("Kỹ Thuật Phần Mềm")) {
            cbx_nganh.setSelectedItem("Kỹ Thuật Phần Mềm");
        }
        if (nganh.equals("CNTT")) {
            cbx_nganh.setSelectedItem("CNTT");
        }
        if (GioiTinh.equals("Nam")) {
            a.setSelected(jRadio_nam.getModel(), true);
        } else {
            a.setSelected(jRadio_nu.getModel(), true);
        }


    }//GEN-LAST:event_tableMouseClicked

    private void btn_TimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_TimActionPerformed
        int index = cbx_TimKiem.getSelectedIndex();
        String maSV = txtmasv.getText();
        String tenSV = txttensv.getText();
        String diaChi = txtdiachi.getText();
        ButtonGroup a = new ButtonGroup();
        a.add(jRadio_nam);
        a.add(jRadio_nu);

        int chucVu = cbx_chucvu.getSelectedIndex();
        int nganh = cbx_nganh.getSelectedIndex();
        loadFile();
        if (index == 0 || index == -1) {
            if (maSV.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "Nhập mã sinh viên cần tìm!");
            } else {
                boolean check = false;
                for (ThongTinThanhVien item : dssv) {
                    if (item.getMaSV().equals(maSV)) {
                        check = true;
                        break;
                    }
                }
                if (!check) {
                    JOptionPane.showMessageDialog(rootPane, "Không tồn tại sinh viên có mã cần tìm!");
                } else {
                    ArrayList<ThongTinThanhVien> ds = new ArrayList<>();
                    for (ThongTinThanhVien item : dssv) {
                        if (item.getMaSV().equals(maSV)) {
                            ds.add(item);
                        }
                    }
                    JOptionPane.showMessageDialog(rootPane, "co tim thay");

                    JTable table = new JTable();
                    DefaultTableModel model = new DefaultTableModel();
                    Object[] columnNames = {"Mã SV1", "Tên SV1", "Địa chỉ1", "Giới tính1", "Chức vụ1", "Ngành học1"};
                    model.setColumnIdentifiers(columnNames);
                    Object[][] rowData = new Object[dssv.size()][6];
                    for (int i = 0; i < ds.size(); i++) {
                        rowData[i][0] = ds.get(i).getMaSV();
                        rowData[i][1] = ds.get(i).getTenSV();
                        rowData[i][3] = ds.get(i).getGioiTinh();
                        rowData[i][2] = ds.get(i).getDiaChi();
                        rowData[i][5] = ds.get(i).getNganhHoc();
                        rowData[i][4] = ds.get(i).getChucVu();
                    }
                    model.setDataVector(rowData, columnNames);
                    this.table.setModel(model);
                    this.add(new JScrollPane(table));
                    this.pack();
                    this.setVisible(true);
                }
            }
        }else if (index == 1) {
            if (tenSV.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "Nhập ten sinh viên cần tìm!");
            } else {
                boolean check = false;
                for (ThongTinThanhVien item : dssv) {
                    if (item.getTenSV().equals(tenSV)) {
                        check = true;
                        break;
                    }
                }
                if (!check) {
                    JOptionPane.showMessageDialog(rootPane, "Không tồn tại sinh viên có ten cần tìm!");
                } else {
                    ArrayList<ThongTinThanhVien> ds = new ArrayList<>();
                    for (ThongTinThanhVien item : dssv) {
                        if (item.getTenSV().equals(maSV)) {
                            ds.add(item);
                        }
                    }
                    JOptionPane.showMessageDialog(rootPane, "co tim thay");

                    JTable table = new JTable();
                    DefaultTableModel model = new DefaultTableModel();
                    Object[] columnNames = {"Mã SV1", "Tên SV1", "Địa chỉ1", "Giới tính1", "Chức vụ1", "Ngành học1"};
                    model.setColumnIdentifiers(columnNames);
                    Object[][] rowData = new Object[dssv.size()][6];
                    for (int i = 0; i < ds.size(); i++) {
                        rowData[i][0] = ds.get(i).getMaSV();
                        rowData[i][1] = ds.get(i).getTenSV();
                        rowData[i][3] = ds.get(i).getGioiTinh();
                        rowData[i][2] = ds.get(i).getDiaChi();
                        rowData[i][5] = ds.get(i).getNganhHoc();
                        rowData[i][4] = ds.get(i).getChucVu();
                    }
                    model.setDataVector(rowData, columnNames);
                    this.table.setModel(model);
                    this.add(new JScrollPane(table));
                    this.pack();
                    this.setVisible(true);
                }
            }
        } else if (index == 3) {
            boolean check = false;
            String gt = (a.getSelection() == jRadio_nam.getModel() ? "Nam" : "Nữ");
            for (ThongTinThanhVien item : dssv) {
                if (item.getGioiTinh().equals(gt)) {
                    check = true;
                    break;
                }
            }
            if (!check) {
                JOptionPane.showMessageDialog(rootPane, "Không tồn tại sinh viên có mã cần tìm!");
            } else {
                ArrayList<ThongTinThanhVien> ds = new ArrayList<>();
                for (ThongTinThanhVien item : dssv) {
                    if (item.getGioiTinh().equals(gt)) {
                        ds.add(item);
                    }
                }
                JOptionPane.showMessageDialog(rootPane, "co tim thay");

                JTable table = new JTable();
                DefaultTableModel model = new DefaultTableModel();
                Object[] columnNames = {"Mã SV1", "Tên SV1", "Địa chỉ1", "Giới tính1", "Chức vụ1", "Ngành học1"};
                model.setColumnIdentifiers(columnNames);
                Object[][] rowData = new Object[dssv.size()][6];
                for (int i = 0; i < ds.size(); i++) {
                    rowData[i][0] = ds.get(i).getMaSV();
                    rowData[i][1] = ds.get(i).getTenSV();
                    rowData[i][3] = ds.get(i).getGioiTinh();
                    rowData[i][2] = ds.get(i).getDiaChi();
                    rowData[i][5] = ds.get(i).getNganhHoc();
                    rowData[i][4] = ds.get(i).getChucVu();
                }
                model.setDataVector(rowData, columnNames);
                this.table.setModel(model);
                this.add(new JScrollPane(table));
                this.pack();
                this.setVisible(true);
            }
        } else if (index == 2) {
            if (diaChi.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "Nhập dia chi cần tìm!");
            } else {
                boolean check = false;
                for (ThongTinThanhVien item : dssv) {
                    if (item.getDiaChi().equals(diaChi)) {
                        check = true;
                        break;
                    }
                }
                if (!check) {
                    JOptionPane.showMessageDialog(rootPane, "Không tồn tại sinh viên có dai chi cần tìm!");
                } else {
                    ArrayList<ThongTinThanhVien> ds = new ArrayList<>();
                    for (ThongTinThanhVien item : dssv) {
                        if (item.getDiaChi().equals(diaChi)) {
                            ds.add(item);
                        }
                    }
                    JOptionPane.showMessageDialog(rootPane, "co tim thay");

                    JTable table = new JTable();
                    DefaultTableModel model = new DefaultTableModel();
                    Object[] columnNames = {"Mã SV1", "Tên SV1", "Địa chỉ1", "Giới tính1", "Chức vụ1", "Ngành học1"};
                    model.setColumnIdentifiers(columnNames);
                    Object[][] rowData = new Object[dssv.size()][6];
                    for (int i = 0; i < ds.size(); i++) {
                        rowData[i][0] = ds.get(i).getMaSV();
                        rowData[i][1] = ds.get(i).getTenSV();
                        rowData[i][3] = ds.get(i).getGioiTinh();
                        rowData[i][2] = ds.get(i).getDiaChi();
                        rowData[i][5] = ds.get(i).getNganhHoc();
                        rowData[i][4] = ds.get(i).getChucVu();
                    }
                    model.setDataVector(rowData, columnNames);
                    this.table.setModel(model);
                    this.add(new JScrollPane(table));
                    this.pack();
                    this.setVisible(true);
                }
            }
        } else if (index == 5) {
            String cv = "";
            if (chucVu == 0 || chucVu == -1) {
                cv = "Quản trị viên";
            }

            if (chucVu == 1) {

                cv = "Thành viên";
            }

            boolean check = false;
            for (ThongTinThanhVien item : dssv) {
                if (item.getChucVu().equals(cv)) {
                    check = true;
                    break;
                }
            }
            if (!check) {
                JOptionPane.showMessageDialog(rootPane, "Không tồn tại sinh viên có chuc vu cần tìm!");
            } else {
                ArrayList<ThongTinThanhVien> ds = new ArrayList<>();
                for (ThongTinThanhVien item : dssv) {
                    if (item.getChucVu().equals(cv)) {
                        ds.add(item);
                    }
                }
                JOptionPane.showMessageDialog(rootPane, "co tim thay");

                JTable table = new JTable();
                DefaultTableModel model = new DefaultTableModel();
                Object[] columnNames = {"Mã SV1", "Tên SV1", "Địa chỉ1", "Giới tính1", "Chức vụ1", "Ngành học1"};
                model.setColumnIdentifiers(columnNames);
                Object[][] rowData = new Object[dssv.size()][6];
                for (int i = 0; i < ds.size(); i++) {
                    rowData[i][0] = ds.get(i).getMaSV();
                    rowData[i][1] = ds.get(i).getTenSV();
                    rowData[i][3] = ds.get(i).getGioiTinh();
                    rowData[i][2] = ds.get(i).getDiaChi();
                    rowData[i][5] = ds.get(i).getNganhHoc();
                    rowData[i][4] = ds.get(i).getChucVu();
                }
                model.setDataVector(rowData, columnNames);
                this.table.setModel(model);
                this.add(new JScrollPane(table));
                this.pack();
                this.setVisible(true);
            }
        } else {
            String nganh1 = "";
            if (nganh == 0 || nganh == -1) {
                nganh1 = "Hệ Thống Thông Tin";
            }
            if (nganh == 1) {
                nganh1 = "Khoa Học Máy Tính";
            }
            if (nganh == 2) {
                nganh1 = "Kỹ Thuật Phần Mềm";
            }
            if (nganh == 3) {
                nganh1 = "CNTT";
            }
            boolean check = false;
            for (ThongTinThanhVien item : dssv) {
                if (item.getNganhHoc().equals(nganh1)) {
                    check = true;
                    break;
                }
            }
            if (!check) {
                JOptionPane.showMessageDialog(rootPane, "Không tồn tại sinh viên có chuc vu cần tìm!");
            } else {
                ArrayList<ThongTinThanhVien> ds = new ArrayList<>();
                for (ThongTinThanhVien item : dssv) {
                    if (item.getNganhHoc().equals(nganh1)) {
                        ds.add(item);
                    }
                }
                JOptionPane.showMessageDialog(rootPane, "co tim thay");

                JTable table = new JTable();
                DefaultTableModel model = new DefaultTableModel();
                Object[] columnNames = {"Mã SV1", "Tên SV1", "Địa chỉ1", "Giới tính1", "Chức vụ1", "Ngành học1"};
                model.setColumnIdentifiers(columnNames);
                Object[][] rowData = new Object[dssv.size()][6];
                for (int i = 0; i < ds.size(); i++) {
                    rowData[i][0] = ds.get(i).getMaSV();
                    rowData[i][1] = ds.get(i).getTenSV();
                    rowData[i][3] = ds.get(i).getGioiTinh();
                    rowData[i][2] = ds.get(i).getDiaChi();
                    rowData[i][5] = ds.get(i).getNganhHoc();
                    rowData[i][4] = ds.get(i).getChucVu();
                }
                model.setDataVector(rowData, columnNames);
                this.table.setModel(model);
                this.add(new JScrollPane(table));
                this.pack();
                this.setVisible(true);
            }
        }
    }//GEN-LAST:event_btn_TimActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        txtmasv.setText("");
        txttensv.setText("");
        txtdiachi.setText("");
        reset();
    }//GEN-LAST:event_jButton1ActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuanLiThanhVien_ITF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuanLiThanhVien_ITF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuanLiThanhVien_ITF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuanLiThanhVien_ITF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuanLiThanhVien_ITF().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Sua;
    private javax.swing.JButton btn_Them;
    private javax.swing.JButton btn_Thoat;
    private javax.swing.JButton btn_Tim;
    private javax.swing.JButton btn_Xoa;
    private javax.swing.JComboBox<String> cbx_TimKiem;
    private javax.swing.JComboBox<String> cbx_chucvu;
    private javax.swing.JComboBox<String> cbx_nganh;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadio_nam;
    private javax.swing.JRadioButton jRadio_nu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    private javax.swing.JTextField txtdiachi;
    private javax.swing.JTextField txtmasv;
    private javax.swing.JTextField txttensv;
    // End of variables declaration//GEN-END:variables
}
